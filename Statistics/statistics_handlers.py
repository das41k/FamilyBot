import datetime
import os

from BOT.keyboards import *
from Statistics.statistics_service import *

user_data = {}


def register_statistics_handlers(bot):
    @bot.message_handler(func=lambda msg: msg.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    def handle_back(message):
        print("[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            message.chat.id,
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_main_keyboard()
        )

    @bot.message_handler(func=lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    def handle_statistics_menu(message):
        print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>",
                         reply_markup=create_statistics_types_keyboard(), parse_mode='HTML')

    @bot.callback_query_handler(func=lambda call: call.data.startswith('stat_'))
    def handle_statistics_callback(call):
        chat_id = call.message.chat.id
        username = call.from_user.username

        try:
            client_info = StatService.get_client_info_by_tg_nick(username)
            if not client_info:
                bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return

            if call.data == 'stat_family_overview':
                if not client_info['family_id']:
                    bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ")
                    return

                bot.send_message(chat_id, "‚è≥ –ì–æ—Ç–æ–≤–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–º—å–∏...")
                family_stats_file = StatService.get_stat_family_operation(client_info['family_id'])
                with open(family_stats_file, 'rb') as photo:
                    bot.send_photo(chat_id, photo, caption="üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–º—å–∏</b>", parse_mode='HTML')
                os.remove(family_stats_file)

                users_stats_files = StatService.get_stat_familyUsers_operation(client_info['family_id'])
                if isinstance(users_stats_files, list):
                    for file in users_stats_files:
                        with open(file, 'rb') as photo:
                            bot.send_photo(chat_id, photo)
                        os.remove(file)
                elif users_stats_files:
                    with open(users_stats_files, 'rb') as photo:
                        bot.send_photo(chat_id, photo, caption="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–º—å–∏</b>",
                                       parse_mode='HTML')
                    os.remove(users_stats_files)

            elif call.data in ['stat_family_dynamics', 'stat_user_dynamics',
                               'stat_family_categories', 'stat_user_categories']:
                show_date_range_keyboard(chat_id, call.data, client_info)

        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            print(f"Error in handle_statistics_callback: {e}")

    def show_date_range_keyboard(chat_id, stat_type, client_info):
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        buttons = [
            types.InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data=f'date_range|{stat_type}|week'),
            types.InlineKeyboardButton("–ú–µ—Å—è—Ü", callback_data=f'date_range|{stat_type}|month'),
            types.InlineKeyboardButton("–ì–æ–¥", callback_data=f'date_range|{stat_type}|year'),
            types.InlineKeyboardButton("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data=f'date_range|{stat_type}|custom'),
        ]
        keyboard.add(*buttons)
        bot.send_message(chat_id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        user_data[chat_id] = {
            'stat_type': stat_type,
            'client_info': client_info
        }

    @bot.callback_query_handler(func=lambda call: call.data.startswith('date_range'))
    def handle_date_range_selection(call):
        chat_id = call.message.chat.id
        _, stat_type, range_type = call.data.split('|')

        try:
            user_info = user_data.get(chat_id, {})
            client_info = user_info.get('client_info')

            if range_type == 'custom':
                msg = bot.send_message(chat_id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î):\n"
                                                "–ù–∞–ø—Ä–∏–º–µ—Ä: 2023-01-01 2023-12-31")
                bot.register_next_step_handler(msg, process_statistics_period)
            else:
                end_date = datetime.date.today()
                if range_type == 'week':
                    start_date = end_date - datetime.timedelta(days=7)
                elif range_type == 'month':
                    start_date = end_date - datetime.timedelta(days=30)
                elif range_type == 'year':
                    start_date = end_date - datetime.timedelta(days=365)

                process_statistics_period_with_dates(chat_id, stat_type, start_date, end_date, client_info)

        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    def process_statistics_period(message):
        chat_id = message.chat.id
        user_info = user_data.get(chat_id, {})

        try:
            dates = message.text.split()
            if len(dates) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–∏–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î")

            start_date, end_date = dates
            datetime.datetime.strptime(start_date, "%Y-%m-%d")
            datetime.datetime.strptime(end_date, "%Y-%m-%d")

            stat_type = user_info.get('stat_type')
            client_info = user_info.get('client_info')

            process_statistics_period_with_dates(chat_id, stat_type, start_date, end_date, client_info)

        except ValueError as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print(f"Error in process_statistics_period: {e}")

    def process_statistics_period_with_dates(chat_id, stat_type, start_date, end_date, client_info):
        try:
            if stat_type == 'stat_family_dynamics':
                if not client_info['family_id']:
                    bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ")
                    return

                bot.send_message(chat_id, "‚è≥ –ì–æ—Ç–æ–≤–∏–º –≥—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å–µ–º—å–∏...")
                stats_file = StatService.get_income_expense_time_series(
                    client_info['family_id'], start_date, end_date
                )
                caption = f"üìà <b>–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–µ–º—å–∏</b>\n" \
                          f"–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}"

            elif stat_type == 'stat_user_dynamics':
                bot.send_message(chat_id, "‚è≥ –ì–æ—Ç–æ–≤–∏–º –≥—Ä–∞—Ñ–∏–∫ –ª–∏—á–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏...")
                stats_file = StatService.get_client_income_expense_time_series(
                    client_info['client_id'], start_date, end_date
                )
                caption = f"üìâ <b>–î–∏–Ω–∞–º–∏–∫–∞ –ª–∏—á–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n" \
                          f"–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}"

            elif stat_type == 'stat_family_categories':
                if not client_info['family_id']:
                    bot.send_message(chat_id, "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ")
                    return

                bot.send_message(chat_id, "‚è≥ –ì–æ—Ç–æ–≤–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–µ–º—å–∏...")
                stats_file = StatService.get_stat_family_category_with_chart_by_date(
                    client_info['family_id'], start_date, end_date
                )
                caption = f"üîÑ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–µ–º—å–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n" \
                          f"–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}"

            elif stat_type == 'stat_user_categories':
                bot.send_message(chat_id, "‚è≥ –ì–æ—Ç–æ–≤–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤...")
                stats_file = StatService.get_stat_client_category_with_chart_by_date(
                    client_info['client_id'], start_date, end_date
                )
                caption = f"üîÑ <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n" \
                          f"–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}"

            else:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

            with open(stats_file, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=caption, parse_mode='HTML')
            os.remove(stats_file)

        except ValueError as e:
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            print(f"Error in process_statistics_period_with_dates: {e}")
