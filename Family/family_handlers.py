# Family/family_handlers.py

from telebot import types

from Family.family_service import family_service
from BOT.keyboards import create_family_keyboard, create_main_keyboard, create_confirm_keyboard


def register_family_handlers(bot):

    @bot.message_handler(func=lambda msg: msg.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    def handle_back(message):
        bot.send_message(
            message.chat.id,
            "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=create_main_keyboard()
        )

    @bot.message_handler(func=lambda msg: msg.text == "‚ûï –°–æ–∑–¥–∞—Ç—å")
    def handle_create_family(message):
        chat_id = message.chat.id
        username = message.from_user.username

        if family_service.get_family_id(username):
            bot.send_message(chat_id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.",
                             reply_markup=create_family_keyboard(username))
            return

        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–µ–º—å–∏:",
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_family_name)

    def process_family_name(message):
        chat_id = message.chat.id
        username = message.from_user.username
        family_name = message.text.strip()

        if not family_name:
            msg = bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            bot.register_next_step_handler(msg, process_family_name)
            return

        msg = bot.send_message(chat_id,
                               "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ\n"
                               "(–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã –∏ —Å–∏–º–≤–æ–ª—ã):",
                               reply_markup=types.ReplyKeyboardRemove())

        bot.register_next_step_handler(msg, lambda m: process_join_code(m, family_name, username))

    def process_join_code(message, family_name, username):
        chat_id = message.chat.id
        join_code = message.text.strip()

        if len(join_code) != 6:
            msg = bot.send_message(chat_id, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(msg, lambda m: process_join_code(m, family_name, username))
            return

        if not family_service.check_join_code_available(join_code):
            msg = bot.send_message(chat_id,
                                   "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:",
                                   reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, lambda m: process_join_code(m, family_name, username))
            return

        try:
            success = family_service.create_family(family_name, join_code, username)

            if success:
                bot.send_message(chat_id,
                                 f"‚úÖ –°–µ–º—å—è '{family_name}' —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {join_code}",
                                 reply_markup=create_family_keyboard(username))
            else:
                bot.send_message(chat_id,
                                 "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é. –í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.",
                                 reply_markup=create_family_keyboard(username))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            bot.send_message(chat_id,
                             "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                             reply_markup=create_family_keyboard(username))

    @bot.message_handler(func=lambda msg: msg.text == "üö™ –í—ã–π—Ç–∏")
    def handle_leave_family(message):
        chat_id = message.chat.id
        username = message.from_user.username

        if not family_service.get_family_id(username):
            bot.send_message(chat_id, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.",
                             reply_markup=create_family_keyboard(username))
            return

        bot.send_message(chat_id,
                         "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–µ–º—å–∏?",
                         reply_markup=create_confirm_keyboard())

        bot.register_next_step_handler(message, process_leave_confirmation)

    def process_leave_confirmation(message):
        chat_id = message.chat.id
        username = message.from_user.username

        if message.text.lower() == "–¥–∞":
            success = family_service.leave_family(username)
            if success:
                bot.send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–µ–º—å–∏.",
                                 reply_markup=create_family_keyboard(username))
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–µ–º—å–∏.",
                                 reply_markup=create_family_keyboard(username))
        else:
            bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ–º—å–∏.",
                             reply_markup=create_family_keyboard(username))

    @bot.message_handler(func=lambda msg: msg.text == "üë™ –ú–æ—è —Å–µ–º—å—è")
    def handle_family_info(message):
        chat_id = message.chat.id
        username = message.from_user.username

        family_id = family_service.get_family_id(username)
        if not family_id:
            bot.send_message(chat_id, "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.",
                             reply_markup=create_family_keyboard(username))
            return

        family_info = family_service.get_family_info(family_id)

        if not family_info:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ.",
                             reply_markup=create_family_keyboard(username))
            return

        family_members = family_service.get_family_members(family_id)

        info_message = (
                f"üë™ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å–µ–º—å–µ:*\n"
                f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: *{family_info['family_name']}*\n"
                f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {family_info['member_count']}\n\n"
                f"üî∏ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join([f"‚Ä¢ @{user}" for user in family_members])
        )

        bot.send_message(chat_id, info_message, parse_mode='MarkdownV2',
                         reply_markup=create_family_keyboard(username))

    @bot.message_handler(func=lambda msg: msg.text == "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
    def handle_join_family(message):
        chat_id = message.chat.id
        username = message.from_user.username

        if family_service.get_family_id(username):
            bot.send_message(
                chat_id,
                "‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.",
                reply_markup=create_family_keyboard(username)
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        cancel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        cancel_keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")

        msg = bot.send_message(
            chat_id,
            "üîë –í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ:",
            reply_markup=cancel_keyboard
        )
        bot.register_next_step_handler(msg, process_join_family_code)

    def process_join_family_code(message):
        chat_id = message.chat.id
        username = message.from_user.username
        user_input = message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if user_input == "‚ùå –û—Ç–º–µ–Ω–∞":
            bot.send_message(
                chat_id,
                "–û—Ç–º–µ–Ω–µ–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ–º—å–µ.",
                reply_markup=create_family_keyboard(username)
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–æ–¥–∞
        if len(user_input) != 6:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ–Ω–æ–π
            cancel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            cancel_keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")

            msg = bot.send_message(
                chat_id,
                "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
                reply_markup=cancel_keyboard
            )
            bot.register_next_step_handler(msg, process_join_family_code)
            return

        try:
            success = family_service.join_family(user_input, username)

            if success:
                bot.send_message(
                    chat_id,
                    "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ!",
                    reply_markup=create_family_keyboard(username)
                )
            else:
                cancel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                cancel_keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")

                msg = bot.send_message(
                    chat_id,
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Å–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
                    reply_markup=cancel_keyboard
                )
                bot.register_next_step_handler(msg, process_join_family_code)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
            bot.send_message(
                chat_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_family_keyboard(username)
            )

