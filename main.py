import telebot
from telebot import types
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

import ServiceAndrey
from ServiceAndrey import Part_Andrey

state_storage = StateMemoryStorage()
bot = telebot.TeleBot('7594766898:AAGCf-erF5yZCHicKVydjky_kOoFDODOfAQ', state_storage=state_storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å: chat_id -> {"user": msg_id, "bot": msg_id}
user_last_prompt = {}


class MyStates(StatesGroup):
    CREATE_FAMILY = State()
    JOIN_FAMILY = State()


def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = ["–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ", "–ú–æ—è —Å–µ–º—å—è"]
    keyboard.add(*buttons)
    return keyboard


@bot.message_handler(commands=['start'])
def start_handler(message):
    username = message.from_user.username
    ServiceAndrey.Part_Andrey.save_user_to_db(username)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, @{username}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_main_keyboard())


@bot.message_handler(func=lambda msg: True, state=None)
def handle_menu_selection(message):
    chat_id = message.chat.id
    username = message.from_user.username
    user_msg_id = message.message_id

    if message.text not in ["–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ", "–ú–æ—è —Å–µ–º—å—è"]:
        fallback_handler(message)
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    if message.text == "–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é":
        if Part_Andrey.get_family_id(username):
            bot.send_message(chat_id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.", reply_markup=create_main_keyboard())
            return

        bot.set_state(chat_id, MyStates.CREATE_FAMILY)
        bot_msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–µ–º—å–∏:")
        user_last_prompt[chat_id] = {"user": user_msg_id, "bot": bot_msg.message_id}

    elif message.text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ":
        if Part_Andrey.get_family_id(username):
            bot.send_message(chat_id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.", reply_markup=create_main_keyboard())
            return

        bot.set_state(chat_id, MyStates.JOIN_FAMILY)
        bot_msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ:")
        user_last_prompt[chat_id] = {"user": user_msg_id, "bot": bot_msg.message_id}

    elif message.text == "–ú–æ—è —Å–µ–º—å—è":
        handle_family_info(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
@bot.message_handler(state=MyStates.CREATE_FAMILY)
def process_family_name_step(message):
    chat_id = message.chat.id
    username = message.from_user.username
    family_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é
    if family_name in ["–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ", "–ú–æ—è —Å–µ–º—å—è"]:
        bot.delete_state(chat_id)
        handle_menu_selection(message)
        return

    if not family_name:
        bot_msg = bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        user_last_prompt[chat_id] = {"user": message.message_id, "bot": bot_msg.message_id}
        return

    success = Part_Andrey.create_family(family_name, username)
    if success:
        bot.send_message(chat_id, f"‚úÖ –°–µ–º—å—è '{family_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=create_main_keyboard())
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_keyboard())

    bot.delete_state(chat_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ
@bot.message_handler(state=MyStates.JOIN_FAMILY)
def process_join_family_step(message):
    chat_id = message.chat.id
    username = message.from_user.username
    join_code = message.text.strip()
    user_msg_id = message.message_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π –º–µ–Ω—é
    if join_code in ["–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–µ–º—å–µ", "–ú–æ—è —Å–µ–º—å—è"]:
        bot.delete_state(chat_id)
        handle_menu_selection(message)
        return

    if not join_code or len(join_code) < 4:
        bot_msg = bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        user_last_prompt[chat_id] = {"user": user_msg_id, "bot": bot_msg.message_id}
        return

    success = Part_Andrey.join_family(join_code, username)
    if success:
        bot.send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–µ–º—å–µ!", reply_markup=create_main_keyboard())
    else:
        bot_msg = bot.send_message(chat_id, "‚ùå –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:",
                                   reply_markup=create_main_keyboard())
        user_last_prompt[chat_id] = {"user": user_msg_id, "bot": bot_msg.message_id}
        return

    bot.delete_state(chat_id)


@bot.message_handler(func=lambda msg: msg.text == "–ú–æ—è —Å–µ–º—å—è")
def handle_family_info(message):
    chat_id = message.chat.id
    username = message.from_user.username

    family_id = Part_Andrey.get_family_id(username)
    if not family_id:
        bot.send_message(chat_id, "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.", reply_markup=create_main_keyboard())
        return

    family_info = Part_Andrey.get_family_info(family_id)

    if not family_info:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ.", reply_markup=create_main_keyboard())
        return

    family_members = Part_Andrey.get_family_members(family_id)

    info_message = (
            f"üë™ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å–µ–º—å–µ:*\n"
            f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: *{family_info['family_name']}*\n"
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {family_info['member_count']}\n\n"
            f"üî∏ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join([f"‚Ä¢ @{user}" for user in family_members])
    )

    bot.send_message(chat_id, info_message, parse_mode='MarkdownV2', reply_markup=create_main_keyboard())


@bot.message_handler(func=lambda m: True)
def fallback_handler(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=create_main_keyboard())


bot.infinity_polling()