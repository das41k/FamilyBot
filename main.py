import telebot
from telebot import types

from ServiceAndrey import Part_Andrey

bot = telebot.TeleBot('7594766898:AAGCf-erF5yZCHicKVydjky_kOoFDODOfAQ')

def create_main_keyboard(username):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if Part_Andrey.get_family_id(username):
        keyboard.add("–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", "–í—ã–π—Ç–∏ –∏–∑ —Å–µ–º—å–∏","–ú–æ—è —Å–µ–º—å—è")
    else:
        keyboard.add("–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é")
    return keyboard

def create_confirm_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–î–∞", "–ù–µ—Ç")
    return keyboard

@bot.message_handler(commands=['start'])
def start_handler(message):
    username = message.from_user.username
    Part_Andrey.save_user_to_db(username)
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, @{username}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=create_main_keyboard(username))

@bot.message_handler(func=lambda msg: msg.text == "–°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é")
def handle_create_family(message):
    chat_id = message.chat.id
    username = message.from_user.username

    if Part_Andrey.get_family_id(username):
        bot.send_message(chat_id, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.",
                         reply_markup=create_main_keyboard(username))
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏
    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–µ–º—å–∏:",
                           reply_markup=types.ReplyKeyboardRemove())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(msg, process_family_name)


def process_family_name(message):
    chat_id = message.chat.id
    username = message.from_user.username
    family_name = message.text.strip()

    if not family_name:
        msg = bot.send_message(chat_id, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(msg, process_family_name)
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    msg = bot.send_message(chat_id,
                           "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ–º—å–µ\n"
                           "(–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã –∏ —Å–∏–º–≤–æ–ª—ã):",
                           reply_markup=types.ReplyKeyboardRemove())

    bot.register_next_step_handler(msg, lambda m: process_join_code(m, family_name, username))


def process_join_code(message, family_name, username):
    chat_id = message.chat.id
    join_code = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–¥–∞
    if len(join_code) != 6:
        msg = bot.send_message(chat_id, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ 6 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, lambda m: process_join_code(m, family_name, username))
        return

    if not Part_Andrey.check_join_code_available(join_code):
        msg = bot.send_message(chat_id,
                               "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥:",
                               reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: process_join_code(m, family_name, username))
        return

    try:
        success = Part_Andrey.create_family(family_name, join_code, username)

        if success:
            bot.send_message(chat_id,
                             f"‚úÖ –°–µ–º—å—è '{family_name}' —Å–æ–∑–¥–∞–Ω–∞!\n–ö–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {join_code}",
                             reply_markup=create_main_keyboard(username))
        else:
            bot.send_message(chat_id,
                             "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é. –í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.",
                             reply_markup=create_main_keyboard(username))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(chat_id,
                         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                         reply_markup=create_main_keyboard(username))

@bot.message_handler(func=lambda msg: msg.text == "–í—ã–π—Ç–∏ –∏–∑ —Å–µ–º—å–∏")
def handle_leave_family(message):
    chat_id = message.chat.id
    username = message.from_user.username

    if not Part_Andrey.get_family_id(username):
        bot.send_message(chat_id, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.",
                         reply_markup=create_main_keyboard(username))
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.send_message(chat_id,
                     "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–µ–º—å–∏?",
                     reply_markup=create_confirm_keyboard())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(message, process_leave_confirmation)


def process_leave_confirmation(message):
    chat_id = message.chat.id
    username = message.from_user.username

    if message.text.lower() == "–¥–∞":
        success = Part_Andrey.leave_family(username)
        if success:
            bot.send_message(chat_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–µ–º—å–∏.",
                             reply_markup=create_main_keyboard(username))
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–µ–º—å–∏.",
                             reply_markup=create_main_keyboard(username))
    else:
        bot.send_message(chat_id, "–û—Ç–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ–º—å–∏.",
                         reply_markup=create_main_keyboard(username))
@bot.message_handler(func=lambda msg: msg.text == "–ú–æ—è —Å–µ–º—å—è")
def handle_family_info(message):
    chat_id = message.chat.id
    username = message.from_user.username

    family_id = Part_Andrey.get_family_id(username)
    if not family_id:
        bot.send_message(chat_id, "–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ.", reply_markup=create_main_keyboard(username))
        return

    family_info = Part_Andrey.get_family_info(family_id)

    if not family_info:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–º—å–µ.",
                         reply_markup=create_main_keyboard(username))
        return

    family_members = Part_Andrey.get_family_members(family_id)

    info_message = (
            f"üë™ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —Å–µ–º—å–µ:*\n"
            f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: *{family_info['family_name']}*\n"
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {family_info['member_count']}\n\n"
            f"üî∏ –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + "\n".join([f"‚Ä¢ @{user}" for user in family_members])
    )

    bot.send_message(chat_id, info_message, parse_mode='MarkdownV2', reply_markup=create_main_keyboard(username))


@bot.message_handler(func=lambda m: True)
def fallback_handler(message):
    bot.send_message(message.chat.id,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                     reply_markup=create_main_keyboard(message.from_user.username))


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()