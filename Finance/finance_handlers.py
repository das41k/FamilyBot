import datetime

from BOT.keyboards import *
from Finance.finance_service import FinanceService

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

def register_finance_handlers(bot):
    @bot.message_handler(func=lambda msg: msg.text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    def handle_add_expense(message):
        chat_id = message.chat.id
        username = message.from_user.username

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
        operation_id = FinanceService.get_operation_type_id_from_db("–†–∞—Å—Ö–æ–¥")
        if not operation_id:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return

        user_data[chat_id] = {
            "username": username,
            "operation_type": "–†–∞—Å—Ö–æ–¥",
            "operation_type_id": operation_id
        }

        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):")
        bot.register_next_step_handler(msg, process_amount_step)

    def process_amount_step(message):
        chat_id = message.chat.id
        try:
            amount = float(message.text)
            user_data[chat_id]['amount'] = amount

            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                   reply_markup=create_categories_keyboard())
            bot.register_next_step_handler(msg, process_category_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            bot.register_next_step_handler(msg, process_amount_step)

    def process_category_step(message):
        chat_id = message.chat.id
        categories = FinanceService.get_categories_from_db()

        if message.text not in categories:
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
            bot.register_next_step_handler(msg, process_category_step)
            return

        user_data[chat_id]['category_id'] = categories[message.text]

        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        bot.register_next_step_handler(msg, process_date_step)

    def process_date_step(message):
        chat_id = message.chat.id
        try:

            username = user_data[chat_id]['username']
            user_date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
            timestamp = datetime.datetime.combine(user_date, datetime.datetime.min.time())
            client_id = FinanceService.get_client_id(username)
            family_id = FinanceService.get_family_id(username)

            amount = user_data[chat_id]['amount']
            category_id = user_data[chat_id]['category_id']
            operation_type_id = user_data[chat_id]['operation_type_id']

            FinanceService.add_operation(
                amount,
                timestamp,
                category_id,
                operation_type_id,
                client_id,
                family_id
            )

            bot.send_message(chat_id, f"‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=create_main_keyboard())
            del user_data[chat_id]

        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
            bot.register_next_step_handler(msg, process_date_step)

    @bot.message_handler(func=lambda msg: msg.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
    def handle_add_income(message):
        chat_id = message.chat.id
        username = message.from_user.username

        operation_id = FinanceService.get_operation_type_id_from_db("–î–æ—Ö–æ–¥")
        if not operation_id:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return

        user_data[chat_id] = {
            "username": username,
            "operation_type": "–î–æ—Ö–æ–¥",
            "operation_type_id": operation_id
        }

        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):")
        bot.register_next_step_handler(msg, process_income_amount_step)

    def process_income_amount_step(message):

        chat_id = message.chat.id
        try:
            amount = float(message.text)
            user_data[chat_id]['amount'] = amount

            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
            bot.register_next_step_handler(msg, process_income_date_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            bot.register_next_step_handler(msg, process_income_amount_step)

    def process_income_date_step(message):
        chat_id = message.chat.id
        try:
            date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
            timestamp = datetime.datetime.combine(date, datetime.datetime.min.time()),
            username = user_data[chat_id]['username']
            client_id = FinanceService.get_client_id(username)
            family_id = FinanceService.get_family_id(username)

            amount = user_data[chat_id]['amount']
            operation_type_id = user_data[chat_id]['operation_type_id']

            FinanceService.add_operation(
                amount,
                timestamp,
                None,  # –î–æ—Ö–æ–¥—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                operation_type_id,
                client_id,
                family_id
            )

            bot.send_message(chat_id, "‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=create_main_keyboard())
            del user_data[chat_id]

        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
            bot.register_next_step_handler(msg, process_income_date_step)

    @bot.message_handler(func=lambda msg: msg.text == "üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥")
    def handle_recurring_expense(message):
        start_recurring_flow(message, "–†–∞—Å—Ö–æ–¥")

    @bot.message_handler(func=lambda msg: msg.text == "üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Ö–æ–¥")
    def handle_recurring_income(message):
        start_recurring_flow(message, "–î–æ—Ö–æ–¥")

    def start_recurring_flow(message, operation_type):
        chat_id = message.chat.id
        username = message.from_user.username

        operation_id = FinanceService.get_operation_type_id_from_db(operation_type)
        if not operation_id:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return

        user_data[chat_id] = {
            "username": username,
            "operation_type": operation_type,
            "operation_type_id": operation_id
        }

        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ —Ä—É–±–ª—è—Ö):")
        bot.register_next_step_handler(msg, process_recurring_amount_step)

    def process_recurring_amount_step(message):
        chat_id = message.chat.id
        try:
            amount = float(message.text)
            user_data[chat_id]['amount'] = amount

            if user_data[chat_id]['operation_type'] == "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥":
                msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
                                       reply_markup=create_categories_keyboard())
                bot.register_next_step_handler(msg, process_recurring_category_step)
            else:
                msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
                bot.register_next_step_handler(msg, process_recurring_start_date_step)

        except ValueError:
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            bot.register_next_step_handler(msg, process_recurring_amount_step)

    def process_recurring_category_step(message):
        chat_id = message.chat.id
        categories = FinanceService.get_categories_from_db()

        if message.text not in categories:
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                                   reply_markup=create_categories_keyboard())
            bot.register_next_step_handler(msg, process_recurring_category_step)
            return

        user_data[chat_id]['category_id'] = categories[message.text]
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):")
        bot.register_next_step_handler(msg, process_recurring_start_date_step)

    def process_recurring_start_date_step(message):
        try:
            chat_id = message.chat.id
            start_date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
            user_data[chat_id]['start_date'] = start_date

            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
            bot.register_next_step_handler(msg, process_recurring_end_date_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
            bot.register_next_step_handler(msg, process_recurring_start_date_step)

    def process_recurring_end_date_step(message):
        try:
            chat_id = message.chat.id
            end_date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
            start_date = user_data[chat_id]['start_date']

            if end_date <= start_date:
                msg = bot.send_message(chat_id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞:")
                bot.register_next_step_handler(msg, process_recurring_end_date_step)
                return

            user_data[chat_id]['end_date'] = end_date

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "–ï–∂–µ–≥–æ–¥–Ω–æ")

            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:", reply_markup=keyboard)
            bot.register_next_step_handler(msg, process_recurring_interval_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")
            bot.register_next_step_handler(msg, process_recurring_end_date_step)

    def process_recurring_interval_step(message):
        try:
            chat_id = message.chat.id
            interval_map = {
                "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ": "1 day",
                "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ": "1 week",
                "–ï–∂–µ–º–µ—Å—è—á–Ω–æ": "1 month",
                "–ï–∂–µ–≥–æ–¥–Ω–æ": "1 year"
            }

            if message.text not in interval_map:
                raise ValueError()

            interval = interval_map[message.text]
            delta = user_data[chat_id]['end_date'] - user_data[chat_id]['start_date']

            min_days = {
                "1 day": 1,
                "1 week": 7,
                "1 month": 28,
                "1 year": 365
            }[interval]

            if delta.days < min_days:
                bot.send_message(chat_id, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è '{message.text}' ‚Äî {min_days} –¥–Ω–µ–π.")
                return

            user_data[chat_id]['payment_interval'] = interval

            username = user_data[chat_id]['username']
            client_id = FinanceService.get_client_id(username)
            family_id = FinanceService.get_family_id(username)

            FinanceService.add_recurring_operation(
                amount=user_data[chat_id]['amount'],
                operation_type_id=user_data[chat_id]['operation_type_id'],
                category_id=user_data[chat_id].get('category_id'),
                client_id=client_id,
                family_id=family_id,
                date_start=user_data[chat_id]['start_date'],
                date_end=user_data[chat_id]['end_date'],
                payment_interval=interval
            )

            bot.send_message(chat_id, "‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                             reply_markup=create_main_keyboard())
            del user_data[chat_id]

        except ValueError:
            msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")
            bot.register_next_step_handler(msg, process_recurring_interval_step)
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

    @bot.message_handler(func=lambda m: True)
    def fallback_handler(message):
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=create_family_keyboard(message.from_user.username)
        )