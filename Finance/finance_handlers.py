import datetime
from telebot import types
from BOT.keyboards import *
from Finance.finance_service import FinanceService

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


def create_categories_with_back():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∞' –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    categories = FinanceService.get_categories_from_db()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if categories:
        keyboard.add(*categories.keys())

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    has_cancel = any(btn.text == "‚ùå –û—Ç–º–µ–Ω–∞" for row in keyboard.keyboard for btn in row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞", –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if not has_cancel:
        keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")

    return keyboard


def register_finance_handlers(bot):
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    def create_finance_keyboard():
        """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [
            "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥",
            "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥",
            "üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ä–∞—Å—Ö–æ–¥",
            "üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Ö–æ–¥",
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "üîô –ù–∞–∑–∞–¥"
        ]
        keyboard.add(*buttons)
        return keyboard

    def create_back_only_keyboard():
        """–¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞"""
        return types.ReplyKeyboardMarkup(resize_keyboard=True).add("‚ùå –û—Ç–º–µ–Ω–∞")

    def create_categories_keyboard():
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –û—Ç–º–µ–Ω–∞"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        categories = FinanceService.get_categories_from_db().keys()
        keyboard.add(*categories)
        keyboard.add("‚ùå –û—Ç–º–µ–Ω–∞")
        return keyboard

    def create_add_more_options():
        """–û–ø—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è + –û—Ç–º–µ–Ω–∞"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞")
        return keyboard

    def create_interval_options():
        """–û–ø—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ + –û—Ç–º–µ–Ω–∞"""
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        keyboard.add("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "–ï–∂–µ–≥–æ–¥–Ω–æ", "‚ùå –û—Ç–º–µ–Ω–∞")
        return keyboard

    def cleanup_user_data(chat_id):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if chat_id in user_data:
            del user_data[chat_id]

    def return_to_finance_menu(chat_id):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        cleanup_user_data(chat_id)
        bot.send_message(chat_id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –§–∏–Ω–∞–Ω—Å—ã",
                         reply_markup=create_finance_keyboard())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    @bot.message_handler(func=lambda msg: msg.text == "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    def handle_add_expense(message):
        chat_id = message.chat.id
        username = message.from_user.username

        operation_id = FinanceService.get_operation_type_id_from_db("–†–∞—Å—Ö–æ–¥")
        if not operation_id:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return

        user_data[chat_id] = {
            "username": username,
            "operation_type": "–†–∞—Å—Ö–æ–¥",
            "operation_type_id": operation_id,
            "categories": []
        }

        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):",
                               reply_markup=create_back_only_keyboard())
        bot.register_next_step_handler(msg, process_expense_amount_step)

    def process_expense_amount_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        try:
            amount = float(message.text)
            if amount <= 0:
                raise ValueError()

            user_data[chat_id]['current_amount'] = amount

            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π —Å—É–º–º—ã:",
                                   reply_markup=create_categories_keyboard())
            bot.register_next_step_handler(msg, process_expense_category_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_expense_amount_step)

    def process_expense_category_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        categories = FinanceService.get_categories_from_db()

        if message.text not in categories:
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                                   reply_markup=create_categories_keyboard())
            bot.register_next_step_handler(msg, process_expense_category_step)
            return

        user_data[chat_id]['categories'].append({
            'category_id': categories[message.text],
            'amount': user_data[chat_id]['current_amount']
        })

        report = "–í—ã –¥–æ–±–∞–≤–∏–ª–∏:\n" + "\n".join(
            f"- {FinanceService.get_category_name_by_id(item['category_id'])}: {item['amount']} —Ä—É–±."
            for item in user_data[chat_id]['categories']
        )
        total = sum(item['amount'] for item in user_data[chat_id]['categories'])
        report += f"\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total} —Ä—É–±.\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏?"

        msg = bot.send_message(chat_id, report,
                               reply_markup=create_add_more_options())
        bot.register_next_step_handler(msg, process_expense_add_more_step)

    def process_expense_add_more_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        if message.text == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å':
            if not user_data[chat_id]['categories']:
                msg = bot.send_message(chat_id, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                       reply_markup=create_categories_keyboard())
                bot.register_next_step_handler(msg, process_expense_category_step)
                return

            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_expense_date_step)
            return

        if message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_expense_amount_step)
            return

        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
                               reply_markup=create_add_more_options())
        bot.register_next_step_handler(msg, process_expense_add_more_step)

    def process_expense_date_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        try:
            username = user_data[chat_id]['username']
            operation_date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
            timestamp = datetime.datetime.combine(operation_date, datetime.datetime.min.time())

            client_id = FinanceService.get_client_id(username)
            family_id = FinanceService.get_family_id(username)
            operation_type_id = user_data[chat_id]['operation_type_id']

            for category in user_data[chat_id]['categories']:
                FinanceService.add_operation(
                    amount=category['amount'],
                    operation_date=timestamp,
                    category_id=category['category_id'],
                    operation_type_id=operation_type_id,
                    client_id=client_id,
                    family_id=family_id
                )

            report = "‚úÖ –†–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n" + "\n".join(
                f"- {FinanceService.get_category_name_by_id(item['category_id'])}: {item['amount']} —Ä—É–±."
                for item in user_data[chat_id]['categories']
            )
            total = sum(item['amount'] for item in user_data[chat_id]['categories'])
            report += f"\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total} —Ä—É–±."

            bot.send_message(chat_id, report,
                             reply_markup=create_main_keyboard())
            cleanup_user_data(chat_id)

        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_expense_date_step)



    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤
    @bot.message_handler(func=lambda msg: msg.text == "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥")
    def handle_add_income(message):
        chat_id = message.chat.id
        username = message.from_user.username

        operation_id = FinanceService.get_operation_type_id_from_db("–î–æ—Ö–æ–¥")
        if not operation_id:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return

        user_data[chat_id] = {
            "username": username,
            "operation_type": "–î–æ—Ö–æ–¥",
            "operation_type_id": operation_id
        }

        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–≤ —Ä—É–±–ª—è—Ö):",
                               reply_markup=create_back_only_keyboard())
        bot.register_next_step_handler(msg, process_income_amount_step)

    def process_income_amount_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        try:
            amount = float(message.text)
            if amount <= 0:
                raise ValueError()

            user_data[chat_id]['amount'] = amount

            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_income_date_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_income_amount_step)

    def process_income_date_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        try:
            username = user_data[chat_id]['username']
            operation_date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
            timestamp = datetime.datetime.combine(operation_date, datetime.datetime.min.time())

            client_id = FinanceService.get_client_id(username)
            family_id = FinanceService.get_family_id(username)

            FinanceService.add_operation(
                amount=user_data[chat_id]['amount'],
                timestamp=timestamp,
                category_id=None,
                operation_type_id=user_data[chat_id]['operation_type_id'],
                client_id=client_id,
                family_id=family_id
            )

            bot.send_message(chat_id, f"‚úÖ –î–æ—Ö–æ–¥ {user_data[chat_id]['amount']} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                             reply_markup=create_main_keyboard())
            cleanup_user_data(chat_id)

        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_income_date_step)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    @bot.message_handler(func=lambda msg: msg.text.startswith("üîÑ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"))
    def handle_recurring_operation(message):
        chat_id = message.chat.id
        username = message.from_user.username
        is_expense = "—Ä–∞—Å—Ö–æ–¥" in message.text.lower()

        operation_type = "–†–∞—Å—Ö–æ–¥" if is_expense else "–î–æ—Ö–æ–¥"
        operation_id = FinanceService.get_operation_type_id_from_db(operation_type)
        if not operation_id:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return

        user_data[chat_id] = {
            "username": username,
            "operation_type": operation_type,
            "operation_type_id": operation_id,
            "is_expense": is_expense
        }

        msg = bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ {operation_type.lower()}–∞ (–≤ —Ä—É–±–ª—è—Ö):",
                               reply_markup=create_back_only_keyboard())
        bot.register_next_step_handler(msg, process_recurring_amount_step)

    def process_recurring_amount_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        try:
            amount = float(message.text)
            if amount <= 0:
                raise ValueError()

            user_data[chat_id]['amount'] = amount

            if user_data[chat_id]['is_expense']:
                msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                                       reply_markup=create_categories_with_back())
                bot.register_next_step_handler(msg, process_recurring_category_step)
            else:
                msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):",
                                       reply_markup=create_back_only_keyboard())
                bot.register_next_step_handler(msg, process_recurring_start_date_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_recurring_amount_step)

    def process_recurring_category_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        categories = FinanceService.get_categories_from_db()

        if message.text not in categories:
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                                   reply_markup=create_categories_with_back())
            bot.register_next_step_handler(msg, process_recurring_category_step)
            return

        user_data[chat_id]['category_id'] = categories[message.text]
        msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):",
                               reply_markup=create_back_only_keyboard())
        bot.register_next_step_handler(msg, process_recurring_start_date_step)

    def process_recurring_start_date_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        try:
            start_date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
            user_data[chat_id]['start_date'] = start_date

            msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_recurring_end_date_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_recurring_start_date_step)

    def process_recurring_end_date_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        try:
            end_date = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()
            start_date = user_data[chat_id]['start_date']

            if end_date <= start_date:
                msg = bot.send_message(chat_id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:",
                                       reply_markup=create_back_only_keyboard())
                bot.register_next_step_handler(msg, process_recurring_end_date_step)
                return

            user_data[chat_id]['end_date'] = end_date
            msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
                                   reply_markup=create_interval_options())
            bot.register_next_step_handler(msg, process_recurring_interval_step)
        except ValueError:
            msg = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
                                   reply_markup=create_back_only_keyboard())
            bot.register_next_step_handler(msg, process_recurring_end_date_step)

    def process_recurring_interval_step(message):
        chat_id = message.chat.id

        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
            return_to_finance_menu(chat_id)
            return

        interval_map = {
            "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ": "1 day",
            "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ": "1 week",
            "–ï–∂–µ–º–µ—Å—è—á–Ω–æ": "1 month",
            "–ï–∂–µ–≥–æ–¥–Ω–æ": "1 year"
        }

        if message.text not in interval_map:
            msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                                   reply_markup=create_interval_options())
            bot.register_next_step_handler(msg, process_recurring_interval_step)
            return

        interval = interval_map[message.text]
        delta = user_data[chat_id]['end_date'] - user_data[chat_id]['start_date']
        min_days = {
            "1 day": 1,
            "1 week": 7,
            "1 month": 28,
            "1 year": 365
        }[interval]

        if delta.days < min_days:
            msg = bot.send_message(
                chat_id,
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - {min_days} –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                reply_markup=create_back_only_keyboard()
            )
            bot.register_next_step_handler(msg, process_recurring_end_date_step)
            return

        try:
            username = user_data[chat_id]['username']
            FinanceService.add_recurring_operation(
                amount=user_data[chat_id]['amount'],
                operation_type_id=user_data[chat_id]['operation_type_id'],
                category_id=user_data[chat_id].get('category_id'),
                client_id=FinanceService.get_client_id(username),
                family_id=FinanceService.get_family_id(username),
                date_start=user_data[chat_id]['start_date'],
                date_end=user_data[chat_id]['end_date'],
                payment_interval=interval
            )

            operation_type = user_data[chat_id]['operation_type'].lower()
            bot.send_message(chat_id, f"‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π {operation_type} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                             reply_markup=create_main_keyboard())
            cleanup_user_data(chat_id)

        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}",
                             reply_markup=create_back_only_keyboard())
    '''
    (—ç—Ç–∞ —à—Ç—É–∫–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ 
        "–ö—Ä–µ–¥–∏—Ç",
        "–í–∫–ª–∞–¥",
        "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è",
        "–ë—é–¥–∂–µ—Ç",
        "–ù–∞–∑–∞–¥" 
        –ù–∞–¥–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫-—Ç–æ)

    @bot.message_handler(func=lambda m: True)
    def fallback_handler(message):
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=create_main_keyboard()
        )
    '''